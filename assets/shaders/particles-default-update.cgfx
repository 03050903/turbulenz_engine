// Copyright (c) 2013-2014 Turbulenz Limited

#include "particles-common.cgh"

float3 acceleration;
float drag;

sampler2D noiseTexture = sampler_state
{
    MinFilter = LinearMipMapNearest;
    MagFilter = Linear;
    WrapS = Wrap;
    WrapT = Wrap;
};

// strength of randomisation
float3 randomizedAcceleration;

float3 getAccelerationNoise(float2 uv, float t)
{
    // constants are randomised values as are choice of noise channels.
    return (2.0 * tex2D(noiseTexture, uv + float2(0.97303011314943430, 0.19842534395866096) * t
                                         + float2(0.84200346702709790, 0.59638088289648291)).zyx - 1.0
           ) * randomizedAcceleration;
}

// --------------------------------------------------------------

float wrap(float x)
{
    x = fmod(x + 1.0, 2.0) - 1.0;
    if (x > 1)
    {
        x -= 2;
    }
    else if (x < -1)
    {
        x += 2;
    }
    return x;
}

float4 fp_update_state_base(bool wrapPositions, float4 wPos)
{
    float2 particle = floor(wPos.xy - regionPos);                  // N^2 [0, regionSize)  (regionSize is 3N)
    float2 index = floor(particle / PARTICLE_DIM) * PARTICLE_DIM;  // (3N)^2 [0, regionSize)

    if (createdParticle(index))
    {
        // Newly created particle, no simulation to be performed.
        return tex2D(creationState, (particle + 0.5) * creationScale);
    }

    if (deadParticle(previousState, index + regionPos, invTextureSize))
    {
        // Dead particle, skip simulation
        return float4(0.0);
    }

    float2 inParticle = wPos.xy * invTextureSize; // (0, 1) uv (1/2) index of fragment in output/previousState.
    float2 slot = particle - index; // N^2 [0, 3)
    if (slot.x == 0.0)
    {
        // position fragment
        float p = decodeSignedFloat(tex2D(previousState, inParticle));
        float v = decodeSignedFloat(tex2D(previousState, inParticle + float2(1.0, 0.0) * invTextureSize));
        p += (v * timeStep * maxSpeed / halfExtents[slot.y]) + shift[slot.y];
        if (wrapPositions)
        {
            return encodeSignedFloat(wrap(p));
        }
        else
        {
            return encodeSignedFloat(p);
        }
    }
    else if (slot.x == 1.0)
    {
        // velocity fragment
        float v = decodeSignedFloat(tex2D(previousState, inParticle));
        float a = acceleration[slot.y];
        float4 data = getDataI(previousState, index + regionPos, invTextureSize);
        if (bitSet(data.w, BIT1))
        {
            float2 noiseUV = decodeByteUnsignedFloat2(data.z);
            float animTime = getAnimationTimeI(previousState,
                                               index + regionPos,
                                               invTextureSize,
                                               getLifePairI(previousState, index + regionPos, invTextureSize));
            a += getAccelerationNoise(noiseUV, animTime)[slot.y];
        }
        float d = 1.0 - min(1.0, timeStep * drag);
        return encodeSignedFloat(d * (v + a * timeStep / maxSpeed));
    }
    else
    {
        if (slot.y == 0.0)
        {
            // life
            float4 pix = tex2D(previousState, inParticle);
            float life = decodeHalfUnsignedFloat(pix.zw);
            return float4(pix.xy, encodeHalfUnsignedFloat(life - lifeStep));
        }
        else
        {
            // user store.
            return tex2D(previousState, inParticle);
        }
    }
}

float4 fp_update_state(float2 inParticle : TEXCOORD0,
                       float4 inWPos     : WPOS) : COLOR
{
    return fp_update_state_base(false, inWPos);
}

float4 fp_update_state_wrap(float2 inParticle : TEXCOORD0,
                            float4 inWPos     : WPOS) : COLOR
{
    return fp_update_state_base(true, inWPos);
}

float4 fp_debug(float2 inParticle: TEXCOORD0,
                float4 inWPos    : WPOS): COLOR
{
    inParticle = particleRegionMap(inParticle);
    float2 slot = mod(floor(inParticle / invTextureSize), 3);
    if (slot.x == 0 || slot.x == 1)
    {
        return float4(decodeUnsignedFloat(tex2D(previousState, inParticle)).xxx, 0.25);
    }
    else
    {
        float2 val = decodeUnsignedFloat2(tex2D(previousState, inParticle));
        return float4(val.x, val.y, 0.0, 0.25);
    }
}

// --------------------------------------------------------------

technique debug
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = true;
        BlendFunc       = int2(SrcAlpha, InvSrcAlpha);

        VertexProgram   = compile latest vp_update();
        FragmentProgram = compile latest fp_debug();
    }
}

technique clamped
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = false;
        VertexProgram   = compile latest vp_update();
        FragmentProgram = compile latest fp_update_state();
    }
}

technique wrapped
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = false;
        VertexProgram   = compile latest vp_update();
        FragmentProgram = compile latest fp_update_state_wrap();
    }
}
